#version 330 // OpenGL version 2.1 (minimum requirement)

in vec3 retNormal; // MUST use same name as out variable used by vertex shader
in vec2 retTexCoord; // from the vertex shader
in vec3 retFragPos;
in vec3 retViewDirection;

out vec4 FragColor;

struct Material
{
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
};

struct Light
{
	// vec3 position;
	vec3 direction;
	vec3 color;
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;
};

uniform Material material;
uniform Light light;

void main()
{
	// vec3 lightDir = normalize(light.position - retFragPos); // Normalize, for correct dot product results
	vec3 lightDir = (-light.direction);
	float lambertianStrength = dot(lightDir, retNormal);
	vec3 refl = reflect(-lightDir, retNormal);
	float specularStrength = pow(max(dot(retViewDirection, refl), 0.0f), material.specularStrength);

	vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light.ambientColor;
	vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light.diffuseColor;
	vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light.specularColor;

	FragColor = vec4(ambient + lambertian + specular, 1.0f); // calculate final color
}